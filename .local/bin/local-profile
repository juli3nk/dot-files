#!/usr/bin/env bash

PROFILE_CONFIG="${HOME}/.config/local/profile.json"
PROFILE_DIR="${HOME}/Vault/local-profile"
BACKUP_DIR="${HOME}/Vault/backups"

DRY_RUN=false

# Enable dry-run mode if the option is provided
if [ "$1" == "--dry-run" ]; then
  DRY_RUN=true
  shift
fi

# Check if profile.json exists
if [ ! -f "$PROFILE_CONFIG" ]; then
  echo "‚ö†Ô∏è Missing configuration file. Creating a default profile..."
  echo '{"name": "default"}' > "$PROFILE_CONFIG"
fi

current_context=$(jq -r '.name' "$PROFILE_CONFIG")

case "$1" in
  new)
    if [ -z "$2" ]; then
      echo "‚ùå Error: Profile name required."
      exit 1
    fi

    echo "üìÇ Creating profile '$2'..."
    $DRY_RUN || mkdir -p "${PROFILE_DIR}/${2}/kubeconfig.d"
    $DRY_RUN || mkdir -p "${PROFILE_DIR}/${2}/ssh/keys"
    $DRY_RUN || touch "${PROFILE_DIR}/${2}/ssh/config"
    $DRY_RUN || touch "${PROFILE_DIR}/${2}/ssh/known_hosts"
    $DRY_RUN || cp "${HOME}/.tool-versions" "${PROFILE_DIR}/${2}/tool-versions"
    echo "‚úÖ Profile '$2' created successfully."
    ;;

  ls)
    echo "üìå Available profiles:"
    ls -1 "$PROFILE_DIR" | sort | sed "s/\(${current_context}\)/\1 */"
    ;;

  use)
    if [ -z "$2" ]; then
      context_name=$(ls -1 "$PROFILE_DIR" | sort | fzf)
    else
      context_name="$2"
    fi

    if [ ! -d "${PROFILE_DIR}/${context_name}" ]; then
      echo "‚ùå Error: Profile '${context_name}' does not exist."
      exit 1
    fi

    echo "‚ö†Ô∏è Warning: This will overwrite your current configuration. Do you want to continue? (y/N)"
    read -r confirmation
    if [[ "$confirmation" != "y" && "$confirmation" != "Y" ]]; then
      echo "‚ùå Operation canceled."
      exit 1
    fi

    echo "üìÇ Backing up current profile '${current_context}'..."
    timestamp=$(date +%Y%m%d_%H%M%S)
    backup_path="${BACKUP_DIR}/${timestamp}_${current_context}"
    $DRY_RUN || mkdir -p "$backup_path"
    $DRY_RUN || rsync -a --delete "${HOME}/.kube/contexts/" "$backup_path/kubeconfig.d/" 2>/dev/null
    $DRY_RUN || rsync -a --delete "${HOME}/.ssh/" "$backup_path/ssh/" 2>/dev/null
    $DRY_RUN || cp "${HOME}/.tool-versions" "$backup_path/tool-versions" 2>/dev/null

    echo "üîÑ Switching to profile '${context_name}'..."
    $DRY_RUN || rsync -a --delete "${PROFILE_DIR}/${context_name}/kubeconfig.d/" "${HOME}/.kube/contexts/" 2>/dev/null
    $DRY_RUN || rsync -a --delete "${PROFILE_DIR}/${context_name}/ssh/" "${HOME}/.ssh/" 2>/dev/null
    $DRY_RUN || cp "${PROFILE_DIR}/${context_name}/tool-versions" "${HOME}/.tool-versions" 2>/dev/null

    "${HOME}/.local/bin/update-kubeconfig"

    tmp_json_file="/tmp/local-profile.json"
    jq --arg cn "$context_name" '.name = $cn' "$PROFILE_CONFIG" > "$tmp_json_file"
    if [[ "$DRY_RUN" = false && -s "$tmp_json_file" ]]; then
      mv "$tmp_json_file" "$PROFILE_CONFIG"
    fi

    echo "‚úÖ Profile '${context_name}' activated."
    ;;

  restore)
    echo "üìÇ Available backups:"
    ls -1 "$BACKUP_DIR" | sort | tail -n 5

    if [ -z "$2" ]; then
      echo "Select a backup using fzf..."
      backup_to_restore=$(ls -1 "$BACKUP_DIR" | sort | fzf)
    else
      backup_to_restore="$2"
    fi

    if [ ! -d "${BACKUP_DIR}/${backup_to_restore}" ]; then
      echo "‚ùå Error: Backup '${backup_to_restore}' not found."
      exit 1
    fi

    echo "üîÑ Restoring backup '${backup_to_restore}'..."
    $DRY_RUN || cp -r "${BACKUP_DIR}/${backup_to_restore}/." "$HOME/"

    echo "‚úÖ Configuration restored from '${backup_to_restore}'."
    ;;

  *)
    echo "‚ùå Invalid command. Usage:"
    echo "  $0 new <profile>           # Create a new profile"
    echo "  $0 ls                      # List available profiles"
    echo "  $0 use <profile>           # Activate a profile"
    echo "  $0 restore <backup_id>     # Restore a backup"
    echo "  $0 --dry-run <command>     # Test a command without executing"
    exit 1
    ;;
esac
