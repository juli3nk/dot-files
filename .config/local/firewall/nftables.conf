table inet fw {
    limit lim_icmp {
        rate 10/second
        comment "no ping floods"
    }

    set lan_v4 {
        type ipv4_addr
        flags interval
    }

    set deny_v4 {
        type ipv4_addr
        flags dynamic, timeout
        timeout 5m
        comment "deny list of blocked ip addresses"
    }

    chain rpfilter {
        type filter hook prerouting priority mangle + 10; policy drop;

        meta nfproto ipv4 udp sport . udp dport { 68 . 67, 67 . 68 } accept comment "DHCPv4 client/server"
        fib saddr . mark . iif oif exists accept comment "reverse path check"
    }

    chain input {
        type filter hook input priority filter; policy drop;

        iifname { "lo", "docker0" } accept comment "trusted interfaces"

        ip saddr @deny_v4 drop comment "drop all clients from blocking list"

        ct state vmap {
            invalid : drop,
            established : accept,
            related : accept,
            new : jump input-allow,
            untracked : jump input-allow
        }

        tcp flags syn / fin,syn,rst,ack log prefix "refused connection: " level info
    }

    chain input-allow {
        fib daddr . iif type != { local, broadcast, multicast } drop comment "Drop packets if the destination IP address is not configured on the incoming interface (strong host model)"

        icmp type echo-request limit name lim_icmp counter accept comment "No ping floods and allow pings"
        icmpv6 type != { nd-redirect, 139 } accept comment "Accept all ICMPv6 messages except redirects and node information queries (type 139).  See RFC 4890, section 4.4."

        ip6 daddr fe80::/64 udp dport 546 accept comment "DHCPv6 client"

        udp dport mdns ip daddr 224.0.0.251 accept comment "Accept mDNS"
    }

    chain output {
        type filter hook output priority filter; policy drop;

        oifname lo accept

        ip daddr @lan_v4 accept

        ct state vmap {
            invalid : drop,
            established : accept,
            related : accept,
            new : jump output-allow,
            untracked : jump output-allow
        }

        # Log tout le reste avant de le drop
        log prefix "BLOCKED OUTPUT: " level warn
        drop
    }

    chain output-allow {
        # allow ping
        ip protocol icmp accept

        # allow DNS connections (UDP & TCP)
        udp dport 53 accept
        tcp dport 53 accept

        # allow NTP
        udp dport 123 accept

        # allow HTTP / HTTPS
        tcp dport { 80, 443 } accept

        # allow SSH
        tcp dport 22 accept
    }
}

table netdev filter {
    chain ingress {
        type filter hook ingress devices = { $if_wlan } priority -500
        jump ingress_filter
    }

    chain ingress_filter {
        ip frag-off & 0x1fff != 0 counter drop comment "drop all fragments"

        tcp flags fin,psh,urg / fin,psh,urg counter packets 0 bytes 0 drop comment "drop xmas nmap packets"
        tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg counter drop comment "drop xmas packets"

        tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop comment "drop null packets"

        tcp flags syn tcp option maxseg size 1-535 counter drop comment "drop uncommon mss values"

        tcp flags & (fin|syn) == (fin|syn) counter drop comment "drop fin and syn at the same time"
        tcp flags & (syn|rst) == (syn|rst) counter drop comment "drop rst and syn at the same time"
    }
}
