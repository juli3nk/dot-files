#-----------------------------------------------------------------------------
# Git Prompt
#-----------------------------------------------------------------------------

bold="";
reset="\e[0m";

black="\e[1;30m";
red="\e[1;31m";
green="\e[1;32m";
yellow="\e[1;33m";
blue="\e[1;34m";
purple="\e[1;35m";
cyan="\e[1;36m";
white="\e[1;37m";
orange="\e[38;5;214m";

# change prompt when using git
git_branch() {
        git symbolic-ref --short -q HEAD 2> /dev/null
}

parse_git_branch() {
	_result=$(git_branch)

        if [ -z "$_result" ]; then
                _result=""
        else
                _result="${_result}"
        fi

        echo ${_result}
}

git_is_uptodate() {
	git_dir=$(git rev-parse --git-dir 2> /dev/null | wc -l)
	code=33

	if [ "${git_dir}" -eq "1" ]; then
		remote="origin"
		code=31

		if [ ! -f /tmp/git-prompt-disabled ]; then
			remote_head=$(git ls-remote -h ${remote} 2> /dev/null | grep "refs/heads/$(git_branch)" | awk '{ print $1 }')

			if [ ! -z ${remote_head} ]; then
				result=$(git log --format="%H" 2> /dev/null | grep ${remote_head} | wc -l)

				if [ "${result}" -eq "1" ]; then
					code=32
				else
					code=31
				fi
			else
				code=33
			fi
		fi
	fi

	echo ${code}
}

git_dirty() {
    # check if we're in a git repo
    command git rev-parse --is-inside-work-tree &>/dev/null || return

    # check if it's dirty
    command git diff --quiet --ignore-submodules HEAD &>/dev/null;
    if [[ $? -eq 1 ]]; then
        echo -e "${red}✗${reset}"
    else
        echo -e "${green}✔${reset}"
    fi
}

# get the status of the current branch and it's remote
# If there are changes upstream, display a ⇣
# If there are changes that have been committed but not yet pushed, display a ⇡
git_arrows() {
    # do nothing if there is no upstream configured
    command git rev-parse --abbrev-ref @"{u}" &>/dev/null || return

    local arrows=""
    local arrow_status=$(command git rev-list --left-right --count HEAD...@"{u}" 2>/dev/null)

    # do nothing if the command failed
    (( !$? )) || return

    # split on tabs
    read -r -a arrow_status <<< "$arrow_status"
    local left=${arrow_status[0]} right=${arrow_status[1]}

    (( ${right:-0} > 0 )) && arrows+="${yellow}⇣${reset}"
    (( ${left:-0} > 0 )) && arrows+="${blue}⇡${reset}"

    echo -e $arrows
}


# indicate a job (for example, vim) has been backgrounded
# If there is a job in the background, display a ✱
suspended_jobs() {
    local sj
    sj=$(jobs 2>/dev/null | tail -n 1)
    if [ -z "$sj" ]; then
        echo ""
    else
        echo -e "${orange}✱${reset}"
    fi
}

# Highlight the user name when logged in as root.
if [ "${USER}" == "root" ]; then
	userStyle="${red}"
else
	userStyle="${cyan}"
fi

# Highlight the hostname when connected via SSH.
if [ -n "${SSH_TTY}" ]; then
	hostStyle="${bold}${red}"
else
	hostStyle="${yellow}"
fi

# Set the terminal title to the current working directory.
PS1="\[\033]0;\u@\h\007\]"
if [[ -n "$SSH_TTY" && -z "$TMUX" ]]; then
	PS1+="\[${bold}\]\n" # newline
	PS1+="\[${userStyle}\]\u" # username
	PS1+="\[${white}\] at "
	PS1+="\[${hostStyle}\]\h" # host
	PS1+="\[${white}\] in "
fi
PS1+="\[${green}\]\w\[${reset}\]"; # working directory
if [ -f /.dockerenv ]; then
        PS1+="\[${white}\] [c]"
fi
PS1+=" \$(git_dirty) \[\$(parse_git_branch) \$(git_arrows) \[\e[m\]"
PS1+="\n"
PS1+="\[${white}\]> \[${reset}\]" # `$` (and reset color)
export PS1

PS2="\[${yellow}\]→ \[${reset}\]"
export PS2
