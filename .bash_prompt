#-----------------------------------------------------------------------------
# Git Prompt
#-----------------------------------------------------------------------------

# ANSI color codes
reset="\e[0m"
bold="\e[1m"

red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
cyan="\e[1;36m"
white="\e[1;37m"
orange="\e[38;5;214m"

# Get the current git branch
git_branch() {
  git symbolic-ref --short HEAD 2>/dev/null
}

# Check if the current branch is up-to-date
git_is_uptodate() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo 33  # No Git repository
    return
  fi

  local remote="origin"
  local remote_head
  local local_head

  remote_head=$(git ls-remote --heads "$remote" "$(git_branch)" 2>/dev/null | awk '{ print $1 }')
  local_head=$(git rev-parse HEAD 2>/dev/null)

  if [[ -z "$remote_head" ]]; then
    echo 33  # No remote tracking branch
  elif [[ "$remote_head" == "$local_head" ]]; then
    echo 32  # Up-to-date (Green)
  else
    echo 31  # Behind remote (Red)
  fi
}

# Check if the working directory is dirty
git_dirty() {
  git rev-parse --is-inside-work-tree &>/dev/null || return

  if git diff --quiet --ignore-submodules HEAD &>/dev/null; then
    echo -e "${green}✔${reset}"
  else
    echo -e "${red}✗${reset}"
  fi
}

# Show arrows if commits are ahead/behind upstream
# If there are changes upstream, display a ⇣
# If there are changes that have been committed but not yet pushed, display a ⇡
git_arrows() {
  git rev-parse --abbrev-ref @{"u"} &>/dev/null || return

  local arrows left right
  read -r left right <<< "$(git rev-list --left-right --count HEAD...@{"u"} 2>/dev/null)"

  [[ "$right" -gt 0 ]] && arrows+="${yellow}⇣${reset}"
  [[ "$left" -gt 0 ]] && arrows+="${blue}⇡${reset}"

  echo -e "$arrows"
}

# Indicate if there are background jobs
# If there is a job in the background, display a ✱
suspended_jobs() {
  if jobs 2>/dev/null | grep -q .; then
    echo -e "${orange}✱${reset}"
  fi
}


# Set styles based on user and SSH session
userStyle=$([[ "$USER" == "root" ]] && echo "$red" || echo "$cyan")
hostStyle=$([[ -n "$SSH_TTY" ]] && echo "${bold}${red}" || echo "$yellow")

# Set the terminal title
PS1="\[\033]0;\u@\h:\w\007\]"

# Prompt structure
if [[ -n "$SSH_TTY" && -z "$TMUX" ]]; then
PS1+="\[${bold}\]\n"
PS1+="\[${userStyle}\]\u\[${white}\] at \[${hostStyle}\]\h"
PS1+="\[${white}\] in "
fi
PS1+="\[${green}\]\w\[${reset}\]"; # working directory

# Docker indicator
[[ -f /.dockerenv ]] && PS1+="\[${white}\] [c]"

# Git status
PS1+=" \$(git_dirty) \$(git_branch) \$(git_arrows) \[${reset}\]"

# Newline + Prompt symbol
PS1+="\n\[${white}\]> \[${reset}\]"

# Secondary prompt
PS2="\[${yellow}\]→ \[${reset}\]"

export PS1 PS2
