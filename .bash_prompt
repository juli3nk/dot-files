#-----------------------------------------------------------------------------
# Git Prompt
#-----------------------------------------------------------------------------

# Colors
color_reset='\e[0m'

color_red='\e[1;31m'
color_green='\[\e[0;32m\]'
color_yellow='\[\e[1;33m\]'
color_blue='\[\e[1;34m\]'
color_cyan='\[\e[1;36m\]'
color_white='\[\e[1;37m\]'


# change prompt when using git
git_branch() {
  local _result="$(git symbolic-ref --short -q HEAD 2> /dev/null)"

  if [ -z "$_result" ]; then
    _result=""
  else
    _result="$_result"
  fi

  echo "$_result"
}

git_dirty() {
  # check if we're in a git repo
  command git rev-parse --is-inside-work-tree &> /dev/null || return

  # check if it's dirty
  command git diff --quiet --ignore-submodules HEAD &> /dev/null
  if [ "$?" -gt 0 ]; then
    echo -e "${color_red}✗${color_reset}"
  else
    echo -e "${color_green}✔${color_reset}"
  fi
}

# get the status of the current branch and it's remote
# If there are changes upstream, display a ⇣
# If there are changes that have been committed but not yet pushed, display a ⇡
git_arrows() {
  # do nothing if there is no upstream configured
  command git rev-parse --abbrev-ref @"{u}" &> /dev/null || return

  local arrows
  local arrow_status
  local left
  local right

  arrow_status="$(command git rev-list --left-right --count HEAD...@"{u}" 2> /dev/null)"

  # do nothing if the command failed
  if [ "$?" -gt 0 ]; then return ; fi

  # split on tabs
  read -r -a arrow_status <<< "$arrow_status"
  left="${arrow_status[0]}"
  right="${arrow_status[1]}"

  if [ "$left" -gt 0 ]; then arrows+="${color_blue}⇡${color_reset}" ; fi
  if [ "$right" -gt 0 ]; then arrows+="${color_yellow}⇣${color_reset}" ; fi

  echo -e "$arrows"
}


# Highlight the user name when logged in as root.
if [ "$USER" == "root" ]; then
  userStyle="$color_red"
else
  userStyle="$color_cyan"
fi

PS1=""

if [ -f "/.dockerenv" ]; then
  PS1+="${color_white}[c]${color_reset} ${userStyle}\u${color_reset} ${white}→${color_reset} "
fi

PS1+="${color_green}\w${color_reset}"
PS1+=" \$(git_dirty) ${color_white}\$(git_branch)${color_reset} \$(git_arrows)"
PS1+="\n"
PS1+="${color_white}>${color_reset} "

PS2="${color_yellow}→${color_reset} "

export PS1 PS2